const AWS = require('aws-sdk');
const secretsManager = new AWS.SecretsManager();

/**
 * Use process.env.SECRETS_NAMESPACE + keyName to retrieve secrets
 * @param {string} keyName 
 * @returns object - get key/value object from secrets manager
 */
exports.getSecrets = async (keyName) => {
    try {
        // Store the SECRETS_NAMESPACE value from the Function's environment variables
        // Construct paramaters to pass to AWS Secrets Manager API call
        // SecretId is a combination of the secret's namespace and the specific secret to return
        // AWS Secrets Manager API call passing through params for retrieval
        const response = await secretsManager.getSecretValue({
            SecretId: process.env.SECRETS_NAMESPACE + keyName,
        }).promise();

        // Accessing the secret's value of the response object
        return secretsJson =  JSON.parse(response.SecretString);
    } catch (exception) {
        throw exception;
    }
};

/**
 * Use process.env.SECRETS_NAMESPACE + keyName to retrieve secrets and set all keys in environmental variables
 * TODO: convert all lambdas to use getSerets so secrets are not in environmental variables
 * @param {string} keyName 
 * @returns object - get key/value object from secrets manager
 */
exports.setEnv = async (keyName) => {
    try {
        // Store the SECRETS_NAMESPACE value from the Function's environment variables
        // Construct paramaters to pass to AWS Secrets Manager API call
        // SecretId is a combination of the secret's namespace and the specific secret to return
        // AWS Secrets Manager API call passing through params for retrieval
        const response = await secretsManager.getSecretValue({
            SecretId: process.env.SECRETS_NAMESPACE + keyName,
        }).promise();

        // Accessing the secret's value of the response object
        const secretsJson =  JSON.parse(response.SecretString);
        for (const secretKey in secretsJson) {
            process.env[secretKey] = secretsJson[secretKey]
        }
    } catch (exception) {
        throw exception;
    }
};